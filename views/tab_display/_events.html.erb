<div class="notes events hide">
  <div class="row">
    
    <div class="col-md-3 span3">
      <h4>When to Use?</h4>
      <p>
        So basically Backbone.JS really kicks in when you have Views 
        (data that is structured into html and css for display to the user) 
        as well as functionallity (so it's all kept in the same place!  Yay!).  
        The big pay off is when you expect your user to make 
        <em>*persistent*</em> changes to the data in the views.  
      </p>
    </div>

    <div class="col-md-3 span3">
      <h4>Don't We Already MVC in Rails???</h4>
      <p>
        So the difference between using Rail's built in MVC vs using a Javascript MVC framework is that 
        when the user makes changes to the app's data through javascript, 
        then your data comes *from* the client side and *to* the server.  
        And in that kind of situation, it's equally helpful to structure your javascript in an MVC format 
        as much as it is to do so in rails.  
      </p>
    </div>

  </div>
</div>